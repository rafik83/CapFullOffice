<?php

namespace CPA\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CorrespendaceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SignedDocRepository extends EntityRepository {

    public function getBsebyIdSalary($id) {
        $qb = $this->createQueryBuilder('ab')
                ->leftJoin('ab.salary', 's')
                ->where('s.id = :id')
                ->setParameter('id', $id);
        return $qb->getQuery()
//                ->getResult();
                        ->getArrayResult();
    }

    public function findBseBySalary($salary) {
        $qb = $this->createQueryBuilder('ab')
//                   ->leftJoin('ab.salary', 's')
//                   ->where('s.id = :id')
                ->where('ab.salary = :salary')
                ->setParameter('salary', $salary);
        return $qb->getQuery()
//                ->getResult();
                        ->getArrayResult();
    }

    public function findBseByArraySalary($array) {
        $qb = $this->createQueryBuilder('ab');
        $qb->select('ab.id, ab.date_debut, ab.date_fin, s.company');
//        $qb->from('SignedDoc', 'ab');
        $qb->leftJoin('ab.salary', 's');
//        $qb->where('s.id = :id');
        $qb->where($qb->expr()->in('s.id', $array));
//        $qb->setParameter('id', $array);
        return $qb->getQuery()->getArrayResult();


//        $qb->where($qb->expr()->in('m.id', array(12, 10)));
    }

    public function findIdDocSigneByArraySalary($array) {
        $qb = $this->createQueryBuilder('ab');
        $qb->select('ab.id,s.id');
//        $qb->from('SignedDoc', 'ab');
        $qb->leftJoin('ab.salary', 's');
//        $qb->where('s.id = :id');
        $qb->where($qb->expr()->in('s.id', $array));
//        $qb->setParameter('id', $array);
        return $qb->getQuery()->getArrayResult();


//        $qb->where($qb->expr()->in('m.id', array(12, 10)));
    }

    public function getBsebyId($id) {
        $qb = $this->createQueryBuilder('bu')
                ->where('bu.id = :id')
                ->setParameter('id', $id);
        return $qb->getQuery()
                        ->getArrayResult();
    }

//    public function findAllByUserResultVote($idVote) {
//        $queryBuilder = $this->createQueryBuilder('r')
//
//                // From your question, it looks like you only want ids
//                ->select('r.id, u.name, v.question, a.answer')
//
//                // join with Vote Entity
//                ->leftJoin('r.vote', 'v')
//                // join with User Entity
//                ->leftJoin('r.user', 'u')
//                // join with Answer Entity
//                ->leftJoin('r.answer', 'a')
//
//                // where id is same as $idVote
//                ->andWhere('v.id = :id_vote')
//                ->setParameter('id_vote', $idVote);
//
//        return $queryBuilder
//                        ->getQuery()
//                        ->getResult();
//    }
//    public function findAllBseBySalary($salary) {
//        $queryBuilder = $this->createQueryBuilder('r')
//
//                // From your question, it looks like you only want ids
//                ->select('r.id, u.name, v.question, a.answer')
//
//                // join with Vote Entity
//                ->leftJoin('r.vote', 'v')
//                // join with User Entity
//                ->leftJoin('r.user', 'u')
//                // join with Answer Entity
//                ->leftJoin('r.answer', 'a')
//
//                // where id is same as $idVote
//                ->andWhere('v.id = :id_vote')
//                ->setParameter('id_vote', $idVote);
//
//        return $queryBuilder
//                        ->getQuery()
//                        ->getResult();
//    }
}
